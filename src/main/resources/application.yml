server:
  port: 8888

spring:
  #  profiles:
  #    active: prod
  messages:
    basename: i18n.login
   # 启用http上传
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB   # 设置支持的单个上传文件的大小限制
      max-request-size: 10MB # 设置最大的请求文件大小，设置总体大小请求
      file-size-threshold: 512KB # 当上传文件达到指定配置量的时候，将文件内容写入磁盘
      location: /           # 设置上传的临时目录
  thymeleaf:
    cache: false
  mvc:
#    date-format: yyyy-MM-dd #默认时间格式为2020/01/20
#    static-path-pattern: /static/**
# 开启mvc的HiddenHttpMethodFilter，以便可以表单可以发送PUT、DELETE等请求
    hiddenmethod:
      filter:
        enabled: true
#Cannot invoke “org.springframework.web.servlet.mvc.condition.PatternsRequestCondition.getPatterns()” because “this.condition” is null
    pathmatch:
      matching-strategy: ant_path_matcher

  datasource:
    username: root
    password: root
    url: jdbc:mysql://localhost:3306/test
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
#    schema:
#      - classpath: sql/department.sql
#      - classpath: sql/employee.sql
    initialSize: 5
    minIdle: 5
    maxActive: 20
    maxWait: 60000
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true
    #   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,log4j
    maxPoolPreparedStatementPerConnectionSize: 20
    useGlobalDataSourceStat: true
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
  jpa:
    database: MySQL
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    show-sql: true
    hibernate:
      ddl-auto: update
      naming:
        # 实体类驼峰命名, 数据库下划线命名
        physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
        # 实体类与数据库都是骆驼峰命名
    properties:
      hibernate:
        use_sql_comments: true
  #        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
#    extra:
#      template-base-package: com.**
#      template-location: classpath:/sqls

  redis:
    host: localhost
    port: 6379
    password: root

  security:
    user:
      name: admin
      password: admin

  #数据库脚本同步
  flyway:
    baseline-on-migrate: true
    baseline-version: 20230221001
    enabled: true

  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    listener:
      simple:
        acknowledge-mode: manual

  activemq:
    broker-url: tcp://127.0.0.1:61616
    user: admin
    password: admin
    close-timeout: 15s   # 在考虑结束之前等待的时间
    in-memory: true      # 默认代理URL是否应该在内存中。如果指定了显式代理，则忽略此值。
    non-blocking-redelivery: false  # 是否在回滚回滚消息之前停止消息传递。这意味着当启用此命令时，消息顺序不会被保留。
    send-timeout: 0     # 等待消息发送响应的时间。设置为0等待永远。
    queue-name: active.queue
    topic-name: active.topic.name.model
    pool:
        enabled: true
        max-connections: 10   #连接池最大连接数
        idle-timeout: 30000   #空闲的连接过期时间，默认为30秒
  jms:
    pub-sub-domain: true  #默认情况下activemq提供的是queue模式，若要使用topic模式需要配置下面配置


  kafka:
    producer: # 生产者
      bootstrap-servers: 127.0.0.1:9092
#      retries: 3 # 设置大于0的值，则客户端会将发送失败的记录重新发送
#      batch-size: 16384
#      buffer-memory: 33554432
#      acks: 1
      # 指定消息key和消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#    consumer:
#      group-id: default-group
#      enable-auto-commit: false
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#    listener:
#      missing-topics-fatal: false
#      concurrency: 3


mybatis-plus:
  mapper-locations: classpath*:/mapper/**/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    lazy-loading-enabled: true


logging:
  level:
    root: info
  file:
    name: logs/logs.log
#    path: /
  logback:
    rollingpolicy:
      file-name-pattern: logs/platform-%d{yyyy-MM-dd}.%i.log

springdoc:
  api-docs:
    path: /api-docs

---
#server:
#  port: 8081
#spring:
#  profiles: dev
---
server:
  port: 8082
  servlet:
    context-path: /boot  #server.servlet.context-path:  配置项目访问路径
spring:
  profiles: prod



#person:
#  last-name: "张三"
#  age: 24
#  birth: 2000/1/1
#  bool: true
#  list: ["a","b"]
##  list:
##    - a
##    - b
#  map: {k1: v1,k2: v2}
#  dog:
#    name: dd
#    age: 2
